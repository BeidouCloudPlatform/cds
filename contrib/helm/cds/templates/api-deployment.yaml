apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cds.fullname" . }}-api
  labels:
    app: {{ template "cds.fullname" . }}-api
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "cds.fullname" . }}-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: {{ template "cds.fullname" . }}-api
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
      - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
      - name: init-config-file
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.cdstag }}"
        command: ['sh', '-c', "[ ! -f '/app/conf/conf.toml' ] && mkdir -p /app/conf && /app/cds-engine-linux-amd64 config new > /app/conf/conf.toml;
        mkdir -p /app/artifacts /app/repositories /app/hatchery-local;
        chown -R cds:cds /app/conf /app/artifacts /app/repositories /app/hatchery-local;
        /app/cds-engine-linux-amd64 config edit /app/conf/conf.toml --output /app/conf/conf.toml \
        api.artifact.local.baseDirectory=/app/artifacts \
        api.cache.redis.host=cds-cache:6379 \
        api.database.connectTimeout=10 \
        api.database.host=cds-db \
        api.database.name=cds \
        api.database.user=cds \
        api.database.password=cds \
        api.database.sslmode=disable \
        api.directories.download=/app \
        api.url.api={{ template "cds.fullname" . }}-api \
        api.url.ui={{ template "cds.fullname" . }}-ui \
        api.log.level=info \
        vcs.url=http://{{ template "cds.fullname" . }}-vcs \
        vcs.api.http.url=http://cds-api:8081 \
        vcs.cache.redis.host={{ template "cds.redis.fullname" . }}-master:{{ default "" .Values.redis.master.port }} \
        ui.url=http://{{ template "cds.fullname" . }}-ui \
        ui.api.http.url=http://{{ template "cds.fullname" . }}-ui/cdsapi \
        ui.hooksURL=http://cds-hooks:8081; cp /app/conf/conf.toml /cache/conf.toml; cat /app/conf/conf.toml"]
        volumeMounts:
        - name: cds-data
          mountPath: {{ .Values.persistence.mountPath }}
        - name: cds-cache
          mountPath: /cache
      containers:
      - name: {{ template "cds.fullname" . }}-api
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.cdstag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env:
        - name: CDS_CONFIG_FILE
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.fullname" . }}
              key: cds_config_file
        - name: CDS_API_DATABASE_HOST
        {{- if .Values.postgresql.enabled }}
          value: {{ template "cds.postgresql.fullname" . }}
        {{- else }}
          value: {{ default "" .Values.externalDatabase.host | quote }}
        {{- end }}
        - name: CDS_API_DATABASE_PASSWORD
        {{- if .Values.postgresql.enabled }}
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.postgresql.fullname" . }}
              key: postgresql-password #reference postgresql chart secret
        {{- else }}
          value: {{ default "" .Values.externalDatabase.password | quote }}
        {{- end }}
        - name: CDS_API_HTTP_PORT
          value: "8081"
        - name: CDS_API_GRPC_PORT
          value: "8082"
        - name: CDS_API_URL_API
          value: http://{{ template "cds.fullname" . }}-ui/cdsapi
        - name: CDS_API_URL_UI
          value: http://{{ template "cds.fullname" . }}-ui
        - name: CDS_API_AUTH_DEFAULTGROUP
          value: cdsdemo
        - name: CDS_LOG_LEVEL
          value: {{ default "" .Values.logLevel | quote }}
        - name: CDS_API_CACHE_REDIS_HOST
          value: {{ template "cds.redis.fullname" . }}-master:{{ default "" .Values.redis.master.port }}
        - name: CDS_API_AUTH_SHAREDINFRATOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.fullname" . }}
              key: cds-api_auth_sharedinfratoken
        - name: CDS_API_SECRETS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "cds.fullname" . }}
              key: cds-api_secrets_key
        command: ["/bin/sh"]
        args: ["-c", "/app/cds-engine-linux-amd64 start api --config /cache/conf.toml"]
        ports:
        - name: http
          containerPort: 8081
        - name: grpc
          containerPort: 8082
        livenessProbe:
{{ toYaml .Values.livenessProbe | indent 10 }}
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: cds-data
          mountPath: {{ .Values.persistence.mountPath }}
        - name: cds-cache
          mountPath: /cache
      volumes:
      - name: cds-data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (printf "%s-api" (include "cds.fullname" .)) }}
      {{- end }}
      - name: cds-cache
        emptyDir: {}
